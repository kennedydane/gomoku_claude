# Generated by Django 5.2.5 on 2025-08-20 15:11

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import users.models
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('username', models.CharField(help_text='Required. 3-50 characters. Letters, numbers, underscores and hyphens only.', max_length=50, unique=True, validators=[django.core.validators.MinLengthValidator(3, message='Username must be at least 3 characters long'), django.core.validators.RegexValidator(message='Username can only contain letters, numbers, underscores, and hyphens', regex='^[\\w-]+$')])),
                ('email', models.EmailField(blank=True, help_text='Optional. Must be unique if provided.', max_length=255, null=True, unique=True)),
                ('display_name', models.CharField(blank=True, help_text='Optional display name shown in the UI', max_length=100)),
                ('games_played', models.PositiveIntegerField(db_index=True, default=0, help_text='Total number of completed games')),
                ('games_won', models.PositiveIntegerField(db_index=True, default=0, help_text='Total number of games won')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'User',
                'verbose_name_plural': 'Users',
                'db_table': 'users',
                'ordering': ['-date_joined'],
            },
            managers=[
                ('objects', users.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='EnhancedToken',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('key', models.CharField(db_index=True, help_text='The token key used for authentication', max_length=40, unique=True)),
                ('device_name', models.CharField(blank=True, help_text='Optional device identifier', max_length=100)),
                ('device_info', models.JSONField(blank=True, default=dict, help_text='Additional device information')),
                ('created_at', models.DateTimeField(auto_now_add=True, help_text='When this token was created')),
                ('expires_at', models.DateTimeField(help_text='When this token expires')),
                ('last_used', models.DateTimeField(blank=True, help_text='When this token was last used', null=True)),
                ('user', models.ForeignKey(help_text='The user this token belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='enhanced_tokens', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Enhanced Token',
                'verbose_name_plural': 'Enhanced Tokens',
                'db_table': 'enhanced_tokens',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddConstraint(
            model_name='user',
            constraint=models.CheckConstraint(condition=models.Q(('games_won__lte', models.F('games_played'))), name='games_won_not_exceed_played'),
        ),
        migrations.AddIndex(
            model_name='enhancedtoken',
            index=models.Index(fields=['user', 'expires_at'], name='enhanced_to_user_id_64d133_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtoken',
            index=models.Index(fields=['key'], name='enhanced_to_key_9fbcdb_idx'),
        ),
        migrations.AddIndex(
            model_name='enhancedtoken',
            index=models.Index(fields=['expires_at'], name='enhanced_to_expires_895058_idx'),
        ),
    ]
