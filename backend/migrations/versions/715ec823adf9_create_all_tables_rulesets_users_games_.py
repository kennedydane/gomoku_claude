"""Create all tables: rulesets, users, games, game_moves

Revision ID: 715ec823adf9
Revises: 750418232757
Create Date: 2025-08-12 17:52:55.000806

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '715ec823adf9'
down_revision: Union[str, None] = '750418232757'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rulesets',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key identifier'),
    sa.Column('name', sa.String(length=100), nullable=False, comment='Unique name of the rule set'),
    sa.Column('board_size', sa.Integer(), nullable=False, comment='Size of the game board (e.g., 15 for 15x15)'),
    sa.Column('allow_overlines', sa.Boolean(), nullable=False, comment='Whether lines longer than 5 stones count as wins'),
    sa.Column('forbidden_moves', sa.JSON(), server_default='{}', nullable=False, comment='JSON field storing complex rule configurations and forbidden move patterns'),
    sa.Column('description', sa.Text(), nullable=True, comment='Human-readable description of the rules'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Timestamp of when the ruleset was created'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Timestamp of when the ruleset was last modified'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_rulesets'))
    )
    op.create_index(op.f('ix_rulesets_allow_overlines'), 'rulesets', ['allow_overlines'], unique=False)
    op.create_index(op.f('ix_rulesets_board_size'), 'rulesets', ['board_size'], unique=False)
    op.create_index(op.f('ix_rulesets_name'), 'rulesets', ['name'], unique=True)
    op.create_table('users',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key identifier'),
    sa.Column('username', sa.String(length=50), nullable=False, comment='Unique username (3-50 characters, case-insensitive)'),
    sa.Column('email', sa.String(length=255), nullable=True, comment='Optional unique email address'),
    sa.Column('display_name', sa.String(length=100), nullable=True, comment='Optional display name for user interface'),
    sa.Column('games_played', sa.Integer(), server_default='0', nullable=False, comment='Total number of completed games'),
    sa.Column('games_won', sa.Integer(), server_default='0', nullable=False, comment='Total number of games won'),
    sa.Column('is_active', sa.Boolean(), server_default='true', nullable=False, comment='Boolean flag for soft deletion (True = active)'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Timestamp of when the user was created'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Timestamp of when the user was last modified'),
    sa.CheckConstraint('games_played >= 0', name=op.f('ck_users_ck_users_games_played_non_negative')),
    sa.CheckConstraint('games_won <= games_played', name=op.f('ck_users_ck_users_games_won_not_exceed_played')),
    sa.CheckConstraint('games_won >= 0', name=op.f('ck_users_ck_users_games_won_non_negative')),
    sa.CheckConstraint('length(username) >= 3', name=op.f('ck_users_ck_users_username_min_length')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_users'))
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_games_played'), 'users', ['games_played'], unique=False)
    op.create_index(op.f('ix_users_games_won'), 'users', ['games_won'], unique=False)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    op.create_table('games',
    sa.Column('id', sa.String(length=36), nullable=False, comment='Primary key (UUID for external API security)'),
    sa.Column('black_player_id', sa.Integer(), nullable=False, comment='Foreign key to User (black player)'),
    sa.Column('white_player_id', sa.Integer(), nullable=True, comment='Foreign key to User (white player, nullable for single player)'),
    sa.Column('ruleset_id', sa.Integer(), nullable=False, comment='Foreign key to RuleSet'),
    sa.Column('status', sa.Enum('WAITING', 'ACTIVE', 'FINISHED', 'ABANDONED', name='gamestatus'), nullable=False, comment='Current game status'),
    sa.Column('current_player', sa.Enum('BLACK', 'WHITE', name='player'), nullable=False, comment="Which player's turn it is"),
    sa.Column('board_state', sa.JSON(), nullable=False, comment='JSON field containing board representation'),
    sa.Column('winner_id', sa.Integer(), nullable=True, comment='Foreign key to User (winner, nullable)'),
    sa.Column('move_count', sa.Integer(), server_default='0', nullable=False, comment='Number of moves made in the game'),
    sa.Column('started_at', sa.DateTime(), nullable=True, comment='When game became active'),
    sa.Column('finished_at', sa.DateTime(), nullable=True, comment='When game ended'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Timestamp of game creation'),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Timestamp of last modification'),
    sa.CheckConstraint("finished_at IS NULL OR status IN ('FINISHED', 'ABANDONED')", name=op.f('ck_games_ck_games_finished_at_only_when_done')),
    sa.CheckConstraint("started_at IS NULL OR status != 'WAITING'", name=op.f('ck_games_ck_games_started_at_not_waiting')),
    sa.CheckConstraint('move_count >= 0', name=op.f('ck_games_ck_games_move_count_non_negative')),
    sa.CheckConstraint('winner_id IN (black_player_id, white_player_id) OR winner_id IS NULL', name=op.f('ck_games_ck_games_winner_must_be_player')),
    sa.ForeignKeyConstraint(['black_player_id'], ['users.id'], name=op.f('fk_games_black_player_id_users')),
    sa.ForeignKeyConstraint(['ruleset_id'], ['rulesets.id'], name=op.f('fk_games_ruleset_id_rulesets')),
    sa.ForeignKeyConstraint(['white_player_id'], ['users.id'], name=op.f('fk_games_white_player_id_users')),
    sa.ForeignKeyConstraint(['winner_id'], ['users.id'], name=op.f('fk_games_winner_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_games'))
    )
    op.create_index(op.f('ix_games_black_player_id'), 'games', ['black_player_id'], unique=False)
    op.create_index(op.f('ix_games_current_player'), 'games', ['current_player'], unique=False)
    op.create_index(op.f('ix_games_move_count'), 'games', ['move_count'], unique=False)
    op.create_index(op.f('ix_games_ruleset_id'), 'games', ['ruleset_id'], unique=False)
    op.create_index(op.f('ix_games_status'), 'games', ['status'], unique=False)
    op.create_index(op.f('ix_games_white_player_id'), 'games', ['white_player_id'], unique=False)
    op.create_index(op.f('ix_games_winner_id'), 'games', ['winner_id'], unique=False)
    op.create_table('game_moves',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False, comment='Primary key (auto-increment integer)'),
    sa.Column('game_id', sa.String(length=36), nullable=False, comment='Foreign key to Game (UUID string)'),
    sa.Column('player_id', sa.Integer(), nullable=False, comment='Foreign key to User (player who made the move)'),
    sa.Column('move_number', sa.Integer(), nullable=False, comment='Sequence number within the game (1, 2, 3, ...)'),
    sa.Column('row', sa.Integer(), nullable=False, comment='Board row position (0-based, 0-14 for 15x15 board)'),
    sa.Column('col', sa.Integer(), nullable=False, comment='Board column position (0-based, 0-14 for 15x15 board)'),
    sa.Column('player_color', sa.Enum('BLACK', 'WHITE', name='player'), nullable=False, comment='Color of the player making the move (BLACK or WHITE)'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('now()'), nullable=False, comment='Timestamp when the move was made'),
    sa.Column('is_winning_move', sa.Boolean(), server_default='false', nullable=False, comment='Boolean indicating if this move won the game'),
    sa.CheckConstraint('col >= 0 AND col <= 14', name=op.f('ck_game_moves_ck_game_moves_col_bounds')),
    sa.CheckConstraint('move_number > 0', name=op.f('ck_game_moves_ck_game_moves_move_number_positive')),
    sa.CheckConstraint('row >= 0 AND row <= 14', name=op.f('ck_game_moves_ck_game_moves_row_bounds')),
    sa.ForeignKeyConstraint(['game_id'], ['games.id'], name=op.f('fk_game_moves_game_id_games'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['player_id'], ['users.id'], name=op.f('fk_game_moves_player_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_game_moves')),
    sa.UniqueConstraint('game_id', 'move_number', name='uq_game_moves_game_sequence'),
    sa.UniqueConstraint('game_id', 'row', 'col', name='uq_game_moves_game_position')
    )
    op.create_index(op.f('ix_game_moves_game_id'), 'game_moves', ['game_id'], unique=False)
    op.create_index(op.f('ix_game_moves_move_number'), 'game_moves', ['move_number'], unique=False)
    op.create_index(op.f('ix_game_moves_player_color'), 'game_moves', ['player_color'], unique=False)
    op.create_index(op.f('ix_game_moves_player_id'), 'game_moves', ['player_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_game_moves_player_id'), table_name='game_moves')
    op.drop_index(op.f('ix_game_moves_player_color'), table_name='game_moves')
    op.drop_index(op.f('ix_game_moves_move_number'), table_name='game_moves')
    op.drop_index(op.f('ix_game_moves_game_id'), table_name='game_moves')
    op.drop_table('game_moves')
    op.drop_index(op.f('ix_games_winner_id'), table_name='games')
    op.drop_index(op.f('ix_games_white_player_id'), table_name='games')
    op.drop_index(op.f('ix_games_status'), table_name='games')
    op.drop_index(op.f('ix_games_ruleset_id'), table_name='games')
    op.drop_index(op.f('ix_games_move_count'), table_name='games')
    op.drop_index(op.f('ix_games_current_player'), table_name='games')
    op.drop_index(op.f('ix_games_black_player_id'), table_name='games')
    op.drop_table('games')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_games_won'), table_name='users')
    op.drop_index(op.f('ix_users_games_played'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_rulesets_name'), table_name='rulesets')
    op.drop_index(op.f('ix_rulesets_board_size'), table_name='rulesets')
    op.drop_index(op.f('ix_rulesets_allow_overlines'), table_name='rulesets')
    op.drop_table('rulesets')
    # ### end Alembic commands ###
