# Generated by Django 5.2.5 on 2025-08-13 07:33

import django.core.validators
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Challenge',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique challenge identifier', primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('PENDING', 'Pending'), ('ACCEPTED', 'Accepted'), ('REJECTED', 'Rejected'), ('EXPIRED', 'Expired'), ('CANCELLED', 'Cancelled')], db_index=True, default='PENDING', help_text='Current challenge status', max_length=20)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('expires_at', models.DateTimeField(help_text='When this challenge expires')),
                ('responded_at', models.DateTimeField(blank=True, help_text='When the challenge was responded to', null=True)),
            ],
            options={
                'verbose_name': 'Challenge',
                'verbose_name_plural': 'Challenges',
                'db_table': 'challenges',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Game',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique game identifier', primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('WAITING', 'Waiting'), ('ACTIVE', 'Active'), ('FINISHED', 'Finished'), ('ABANDONED', 'Abandoned')], db_index=True, default='WAITING', help_text='Current game status', max_length=10)),
                ('current_player', models.CharField(choices=[('BLACK', 'Black'), ('WHITE', 'White')], default='BLACK', help_text='Player whose turn it is', max_length=5)),
                ('board_state', models.JSONField(default=dict, help_text='Current board state as JSON')),
                ('move_count', models.PositiveIntegerField(default=0, help_text='Number of moves made')),
                ('started_at', models.DateTimeField(blank=True, help_text='When the game started', null=True)),
                ('finished_at', models.DateTimeField(blank=True, help_text='When the game finished', null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Game',
                'verbose_name_plural': 'Games',
                'db_table': 'games',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GameEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(help_text="Type of event (e.g., 'move', 'game_start', 'challenge')", max_length=50)),
                ('event_data', models.JSONField(help_text='Event payload as JSON')),
                ('consumed', models.BooleanField(db_index=True, default=False, help_text='Whether this event has been consumed')),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
            ],
            options={
                'verbose_name': 'Game Event',
                'verbose_name_plural': 'Game Events',
                'db_table': 'game_events',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='GameMove',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('move_number', models.PositiveIntegerField(help_text='Sequential move number')),
                ('row', models.PositiveIntegerField(help_text='Row position (0-based)', validators=[django.core.validators.MaxValueValidator(24)])),
                ('col', models.PositiveIntegerField(help_text='Column position (0-based)', validators=[django.core.validators.MaxValueValidator(24)])),
                ('player_color', models.CharField(choices=[('BLACK', 'Black'), ('WHITE', 'White')], help_text='Color of the player making the move', max_length=5)),
                ('is_winning_move', models.BooleanField(default=False, help_text='Whether this move won the game')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Game Move',
                'verbose_name_plural': 'Game Moves',
                'db_table': 'game_moves',
                'ordering': ['game', 'move_number'],
            },
        ),
        migrations.CreateModel(
            name='PlayerSession',
            fields=[
                ('session_id', models.UUIDField(default=uuid.uuid4, editable=False, help_text='Unique session identifier', primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('ONLINE', 'Online'), ('IDLE', 'Idle'), ('IN_GAME', 'In Game')], default='ONLINE', help_text='Current session status', max_length=20)),
                ('last_activity', models.DateTimeField(auto_now=True, db_index=True, help_text='Last activity timestamp')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name': 'Player Session',
                'verbose_name_plural': 'Player Sessions',
                'db_table': 'player_sessions',
                'ordering': ['-last_activity'],
            },
        ),
        migrations.CreateModel(
            name='RuleSet',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, help_text='Unique name of the rule set', max_length=100, unique=True)),
                ('board_size', models.PositiveIntegerField(default=15, help_text='Size of the game board (e.g., 15 for 15x15)', validators=[django.core.validators.MinValueValidator(9, message='Board size must be at least 9'), django.core.validators.MaxValueValidator(25, message='Board size cannot exceed 25')])),
                ('allow_overlines', models.BooleanField(default=False, help_text='Whether lines longer than 5 stones count as wins')),
                ('forbidden_moves', models.JSONField(blank=True, default=dict, help_text='JSON configuration for forbidden move patterns')),
                ('description', models.TextField(blank=True, help_text='Human-readable description of the rules')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Rule Set',
                'verbose_name_plural': 'Rule Sets',
                'db_table': 'rulesets',
                'ordering': ['name'],
            },
        ),
    ]
